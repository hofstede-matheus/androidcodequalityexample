{"version":3,"sources":["model/Bank.ts","service/dolarService.ts","App.tsx","service/purchaseCalculatorService.ts","data/constants.js","index.tsx"],"names":["Bank","id","name","backgroundColor","textColor","spreadPercentage","spreadLink","this","ehDiaUtil","require","getDolarInLastWorkDay","a","lastWorkDay","moment","getLastWorkDay","format","fetch","method","headers","day","subtract","App","banks","plainToClass","banksJson","useState","selectedBank","setSelectedBank","purchaseValueInDolar","setPurchaseValueInDolar","purchaseValueInReais","setPurchaseValueInReais","dolarPTAX","setDolarPTAX","then","response","json","data","value","cotacaoVenda","useEffect","getDolarValue","iofPercentage","toFixed","calculatePurchase","classes","makeStyles","createStyles","main","minHeight","display","flexDirection","alignItems","justifyContent","bankSelect","fontSize","borderColor","margin","color","bankSelectIcon","input","borderBottom","spreadLinkText","priceText","useStyles","className","Select","disableUnderline","root","icon","onChange","event","target","map","bank","MenuItem","TextField","type","parseFloat","label","Typography","Link","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16ac5b5f.chunk.js","sourcesContent":["export class Bank {\n    id: number;\n    name: string;\n    backgroundColor: string;\n    textColor: string;\n    spreadPercentage: number;\n    spreadLink: string;\n\n    constructor(\n        id: number,\n        name: string,\n        backgroundColor: string,\n        textColor: string,\n        spreadPercentage: number,\n        spreadLink: string)\n    {\n        this.id = id;\n        this.name = name;\n        this.backgroundColor = backgroundColor;\n        this.textColor = textColor;\n        this.spreadPercentage = spreadPercentage;\n        this.spreadLink = spreadLink;\n    }\n}","import moment from \"moment\"\nimport {Moment} from \"moment/moment\";\nconst ehDiaUtil = require('@lfreneda/eh-dia-util')\n\nexport async function getDolarInLastWorkDay(): Promise<Response> {\n    const lastWorkDay = moment(getLastWorkDay(moment())).format('MM-DD-YYYY')\n    return await fetch(\n        `https://olinda.bcb.gov.br/olinda/servico/PTAX/versao/v1/odata/CotacaoDolarDia(dataCotacao=@dataCotacao)?%40dataCotacao='${lastWorkDay}'`,\n        {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        });\n}\n\nfunction getLastWorkDay(day: Moment): Moment {\n    if(ehDiaUtil(day.format('YYYY-MM-DD'))) return day\n    else getLastWorkDay(day.subtract(1, 'days'))\n    return day\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {plainToClass} from 'class-transformer';\nimport banksJson from './data/banks.json';\nimport {Bank} from \"./model/Bank\";\nimport {createStyles, Grid, Link, makeStyles, MenuItem, Select, TextField, Typography} from \"@material-ui/core\";\nimport {getDolarInLastWorkDay} from \"./service/dolarService\"\nimport {calculatePurchase} from \"./service/purchaseCalculatorService\"\nimport {IOF} from \"./data/constants\";\n\nfunction App() {\n    const banks = plainToClass(Bank, banksJson);\n    const [selectedBank, setSelectedBank] = useState(banks[0]);\n    const [purchaseValueInDolar, setPurchaseValueInDolar] = useState(0)\n    const [purchaseValueInReais, setPurchaseValueInReais] = useState(\"\")\n    const [dolarPTAX, setDolarPTAX] = useState(0)\n\n    useEffect(() => {\n        getDolarValue()\n    }, []);\n\n    useEffect(() => {\n        setPurchaseValueInReais(calculatePurchase(\n            purchaseValueInDolar,\n            dolarPTAX,\n            selectedBank.spreadPercentage,\n            IOF\n        ));\n    }, [selectedBank, purchaseValueInDolar, dolarPTAX]);\n\n    async function getDolarValue() {\n        await getDolarInLastWorkDay()\n            .then(response => response.json())\n            .then(data => {\n                setDolarPTAX(data.value[0].cotacaoVenda)\n            });\n    }\n\n    const useStyles = makeStyles(() =>\n        createStyles({\n            main: {\n                backgroundColor: selectedBank.backgroundColor,\n                minHeight: \"100vh\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n            },\n            bankSelect: {\n                fontSize: 24,\n                borderColor: selectedBank.textColor,\n                margin: 8,\n                color: selectedBank.textColor,\n            },\n            bankSelectIcon: {\n                color: selectedBank.textColor\n            },\n            input: {\n                margin: 8,\n                fontSize: 20,\n                \"& .MuiInputBase-root\": {\n                    color: selectedBank.textColor\n                },\n                \"& .MuiInputLabel-root\": {\n                    color: selectedBank.textColor\n                },\n                \"& .MuiInput-underline:before\": {\n                    borderBottom: `2px solid ${selectedBank.textColor}`\n                },\n                \"& .MuiInput-underline:after\": {\n                    borderBottom: `2px solid ${selectedBank.textColor}`\n                },\n                \"& .MuiInput-underline:hover:before\": {\n                    borderBottom: `2px solid ${selectedBank.textColor}`\n                },\n            },\n            spreadLinkText: {\n                fontSize: 14,\n                color: selectedBank.textColor\n            },\n            priceText: {\n                margin: 24,\n                fontSize: 48,\n                color: selectedBank.textColor\n            }\n        }),\n    );\n    const classes = useStyles();\n\n    return (\n        <div className={classes.main}>\n            <Select\n                disableUnderline={true}\n                id=\"bank-select\"\n                classes={{\n                    root: classes.bankSelect,\n                    icon: classes.bankSelectIcon,\n\n                }}\n                value={selectedBank.id}\n                onChange={\n                    (event) =>\n                        setSelectedBank(banks[event.target.value as number])\n                }\n            >\n                {\n                    banks.map((bank) => {\n                        return (\n                            <MenuItem value={bank.id}>{bank.name}</MenuItem>\n                        )\n                    })\n                }\n            </Select>\n            <TextField\n                className={classes.input}\n                id=\"value-dolar\"\n                type=\"number\"\n                onChange={(event) => {\n                        setPurchaseValueInDolar(parseFloat(event.target.value) || 0)\n                }}\n                value={purchaseValueInDolar}\n                label=\"Valor em dÃ³lar $\"/>\n            <TextField\n                id=\"dolar-ptax\"\n                value={dolarPTAX}\n                className={classes.input}\n                type=\"number\"\n                onChange={(event) => {\n                        setDolarPTAX(parseFloat(event.target.value) || 0)\n                }}\n                label=\"DÃ³lar PTAX\"/>\n            <TextField\n                id=\"iof\"\n                className={classes.input}\n                type=\"number\"\n                value={IOF}\n                label=\"IOF (%)\"/>\n            <TextField\n                id=\"spread\"\n                className={classes.input}\n                type=\"number\"\n                value={selectedBank.spreadPercentage}\n                label=\"Spread (%)\"/>\n            <Typography>\n                <Link\n                    className={classes.spreadLinkText}\n                    target=\"_blank\"\n                    href={selectedBank.spreadLink}\n                >\n                    * InformaÃ§Ãµes oficiais de spread\n                </Link>\n            </Typography>\n            <Typography\n                className={classes.priceText}\n            >\n                R$ {purchaseValueInReais}\n            </Typography>\n        </div>\n    );\n}\n\nexport default App;\n","export function calculatePurchase(\n    purchaseValueInDolar: number,\n    dolarPTAX: number,\n    spreadPercentage: number,\n    iofPercentage: number)\n    : string\n{\n    return (purchaseValueInDolar *\n        (dolarPTAX * (1 + spreadPercentage / 100)) *\n        (1 + iofPercentage /100)).toFixed(2);\n}","export const IOF = 6.38","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}